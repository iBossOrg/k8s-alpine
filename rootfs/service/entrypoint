#!/bin/bash

### MESSAGE ####################################################################

# Format message
msg() {
  local LEVEL=$1; shift
  local ENTRYPOINT=$1; shift
  local TIMESTAMP
  TIMESTAMP="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  ENTRYPOINT="$(basename "${ENTRYPOINT}")"

  printf "[%-24s][%-5s][%-25s] $*\n" "${TIMESTAMP}" "${LEVEL}" "${ENTRYPOINT}"
}

# Messages with severity
error() {
  msg "ERROR" "${ENTRYPOINT:-$0}" "$*"
}

warn() {
  msg "WARN" "${ENTRYPOINT:-$0}" "$*"
}

info() {
  if [ -n "${ENTRYPOINT_INFO}" ] || [ -n "${ENTRYPOINT_DEBUG}" ]; then
    msg "INFO" "${ENTRYPOINT:-$0}" "$*"
  fi
}

debug() {
  if [ -n "${ENTRYPOINT_DEBUG}" ]; then
    msg "DEBUG" "${ENTRYPOINT:-$0}" "$*"
  fi
}

### ENTRYPOINT #################################################################

# Stop on first error
set -e

# Lock against parallel execution
exec 100</service/entrypoint
flock -x 100

# Run entrypoint scripts
if [ -e /entrypoint ]; then
  for ENTRYPOINT in /entrypoint/*.sh; do
    # shellcheck source=/dev/null
    . "${ENTRYPOINT}"
  done
  unset ENTRYPOINT
fi

# If the process namespace in Kubernetes Pod is not shared,
# we must use our own init process
if [ "$$" == "1" ]; then
  debug "Using '$(command -v tini)' as an init process"
  set -- "$(command -v tini)" -- "$@"
fi

# Execute with non-root privileges
if [ "${EUID}" -eq 0 ] && [ -n "${RUN_AS_USER}" ]; then
  debug "Running as '${RUN_AS_USER}:${RUN_AS_GROUP:-${RUN_AS_USER}}'"
  set -- "$(command -v su-exec)" "${RUN_AS_USER}:${RUN_AS_GROUP:-${RUN_AS_USER}}" "$@"
fi

# Unlock
flock -u 100

# Execute command
info "Executing command: $(printf "[%s]", "$@")"
exec "$@"

################################################################################
